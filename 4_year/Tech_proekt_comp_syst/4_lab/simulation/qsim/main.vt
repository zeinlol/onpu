// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2021 10:04:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	bin,
	clock,
	clock11,
	clock17,
	clock19,
	reset,
	reset12,
	reset18,
	reset20,
	sampler_tx
);
input [3:0] bin;
input  clock;
input  clock11;
input  clock17;
input  clock19;
input  reset;
input  reset12;
input  reset18;
input  reset20;
output sampler_tx;

reg sample;
time current_time;
always @(bin or clock or clock11 or clock17 or clock19 or reset or reset12 or reset18 or reset20)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	overflow,
	Q,
	Q13,
	Q16,
	sseg,
	sampler_rx
);
input  overflow;
input [3:0] Q;
input [3:0] Q13;
input [3:0] Q16;
input [6:0] sseg;
input sampler_rx;

reg  overflow_expected;
reg [3:0] Q_expected;
reg [3:0] Q13_expected;
reg [3:0] Q16_expected;
reg [6:0] sseg_expected;

reg  overflow_prev;
reg [3:0] Q_prev;
reg [3:0] Q13_prev;
reg [3:0] Q16_prev;
reg [6:0] sseg_prev;

reg [3:0] Q_expected_prev;
reg [3:0] Q13_expected_prev;
reg [3:0] Q16_expected_prev;

reg [3:0] last_Q_exp;
reg [3:0] last_Q13_exp;
reg [3:0] last_Q16_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	overflow_prev = overflow;
	Q_prev = Q;
	Q13_prev = Q13;
	Q16_prev = Q16;
	sseg_prev = sseg;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
	Q13_expected_prev = Q13_expected;
	Q16_expected_prev = Q16_expected;
end


// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// expected Q13[ 3 ]
initial
begin
	Q13_expected[3] = 1'bX;
end 
// expected Q13[ 2 ]
initial
begin
	Q13_expected[2] = 1'bX;
end 
// expected Q13[ 1 ]
initial
begin
	Q13_expected[1] = 1'bX;
end 
// expected Q13[ 0 ]
initial
begin
	Q13_expected[0] = 1'bX;
end 
// expected Q16[ 3 ]
initial
begin
	Q16_expected[3] = 1'bX;
end 
// expected Q16[ 2 ]
initial
begin
	Q16_expected[2] = 1'bX;
end 
// expected Q16[ 1 ]
initial
begin
	Q16_expected[1] = 1'bX;
end 
// expected Q16[ 0 ]
initial
begin
	Q16_expected[0] = 1'bX;
end 
// generate trigger
always @(overflow_expected or overflow or Q_expected or Q or Q13_expected or Q13 or Q16_expected or Q16 or sseg_expected or sseg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected overflow = %b | expected Q = %b | expected Q13 = %b | expected Q16 = %b | expected sseg = %b | ",overflow_expected_prev,Q_expected_prev,Q13_expected_prev,Q16_expected_prev,sseg_expected_prev);
	$display("| real overflow = %b | real Q = %b | real Q13 = %b | real Q16 = %b | real sseg = %b | ",overflow_prev,Q_prev,Q13_prev,Q16_prev,sseg_prev);
`endif
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q13_expected_prev[0] !== 1'bx ) && ( Q13_prev[0] !== Q13_expected_prev[0] )
		&& ((Q13_expected_prev[0] !== last_Q13_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q13_exp[0] = Q13_expected_prev[0];
	end
	if (
		( Q13_expected_prev[1] !== 1'bx ) && ( Q13_prev[1] !== Q13_expected_prev[1] )
		&& ((Q13_expected_prev[1] !== last_Q13_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q13_exp[1] = Q13_expected_prev[1];
	end
	if (
		( Q13_expected_prev[2] !== 1'bx ) && ( Q13_prev[2] !== Q13_expected_prev[2] )
		&& ((Q13_expected_prev[2] !== last_Q13_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q13_exp[2] = Q13_expected_prev[2];
	end
	if (
		( Q13_expected_prev[3] !== 1'bx ) && ( Q13_prev[3] !== Q13_expected_prev[3] )
		&& ((Q13_expected_prev[3] !== last_Q13_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q13_exp[3] = Q13_expected_prev[3];
	end
	if (
		( Q16_expected_prev[0] !== 1'bx ) && ( Q16_prev[0] !== Q16_expected_prev[0] )
		&& ((Q16_expected_prev[0] !== last_Q16_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q16[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q16_expected_prev);
		$display ("     Real value = %b", Q16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q16_exp[0] = Q16_expected_prev[0];
	end
	if (
		( Q16_expected_prev[1] !== 1'bx ) && ( Q16_prev[1] !== Q16_expected_prev[1] )
		&& ((Q16_expected_prev[1] !== last_Q16_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q16[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q16_expected_prev);
		$display ("     Real value = %b", Q16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q16_exp[1] = Q16_expected_prev[1];
	end
	if (
		( Q16_expected_prev[2] !== 1'bx ) && ( Q16_prev[2] !== Q16_expected_prev[2] )
		&& ((Q16_expected_prev[2] !== last_Q16_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q16[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q16_expected_prev);
		$display ("     Real value = %b", Q16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q16_exp[2] = Q16_expected_prev[2];
	end
	if (
		( Q16_expected_prev[3] !== 1'bx ) && ( Q16_prev[3] !== Q16_expected_prev[3] )
		&& ((Q16_expected_prev[3] !== last_Q16_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q16[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q16_expected_prev);
		$display ("     Real value = %b", Q16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q16_exp[3] = Q16_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] bin;
reg clock;
reg clock11;
reg clock17;
reg clock19;
reg reset;
reg reset12;
reg reset18;
reg reset20;
// wires                                               
wire overflow;
wire [3:0] Q;
wire [3:0] Q13;
wire [3:0] Q16;
wire [6:0] sseg;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.bin(bin),
	.clock(clock),
	.clock11(clock11),
	.clock17(clock17),
	.clock19(clock19),
	.overflow(overflow),
	.Q(Q),
	.Q13(Q13),
	.Q16(Q16),
	.reset(reset),
	.reset12(reset12),
	.reset18(reset18),
	.reset20(reset20),
	.sseg(sseg)
);

// clock11
always
begin
	clock11 = 1'b0;
	clock11 = #5000 1'b1;
	#5000;
end 

// clock17
always
begin
	clock17 = 1'b0;
	clock17 = #5000 1'b1;
	#5000;
end 

// clock19
always
begin
	clock19 = 1'b0;
	clock19 = #5000 1'b1;
	#5000;
end 

// reset12
initial
begin
	reset12 = 1'b0;
end 

// reset18
initial
begin
	reset18 = 1'b0;
end 

// reset20
initial
begin
	reset20 = 1'b0;
end 

main_vlg_sample_tst tb_sample (
	.bin(bin),
	.clock(clock),
	.clock11(clock11),
	.clock17(clock17),
	.clock19(clock19),
	.reset(reset),
	.reset12(reset12),
	.reset18(reset18),
	.reset20(reset20),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.overflow(overflow),
	.Q(Q),
	.Q13(Q13),
	.Q16(Q16),
	.sseg(sseg),
	.sampler_rx(sampler)
);
endmodule

