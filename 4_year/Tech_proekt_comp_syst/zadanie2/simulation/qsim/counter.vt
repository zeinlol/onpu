// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2021 16:09:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	CLK,
	enable,
	Res,
	sampler_tx
);
input  CLK;
input  enable;
input  Res;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or enable or Res)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	eq0,
	eq1,
	eq2,
	eq3,
	eq4,
	eq5,
	eq6,
	eq7,
	eq8,
	eq9,
	eq10,
	eq11,
	eq12,
	eq13,
	eq14,
	eq15,
	sampler_rx
);
input  eq0;
input  eq1;
input  eq2;
input  eq3;
input  eq4;
input  eq5;
input  eq6;
input  eq7;
input  eq8;
input  eq9;
input  eq10;
input  eq11;
input  eq12;
input  eq13;
input  eq14;
input  eq15;
input sampler_rx;

reg  eq0_expected;
reg  eq1_expected;
reg  eq2_expected;
reg  eq3_expected;
reg  eq4_expected;
reg  eq5_expected;
reg  eq6_expected;
reg  eq7_expected;
reg  eq8_expected;
reg  eq9_expected;
reg  eq10_expected;
reg  eq11_expected;
reg  eq12_expected;
reg  eq13_expected;
reg  eq14_expected;
reg  eq15_expected;

reg  eq0_prev;
reg  eq1_prev;
reg  eq2_prev;
reg  eq3_prev;
reg  eq4_prev;
reg  eq5_prev;
reg  eq6_prev;
reg  eq7_prev;
reg  eq8_prev;
reg  eq9_prev;
reg  eq10_prev;
reg  eq11_prev;
reg  eq12_prev;
reg  eq13_prev;
reg  eq14_prev;
reg  eq15_prev;

reg  eq0_expected_prev;
reg  eq1_expected_prev;
reg  eq2_expected_prev;
reg  eq3_expected_prev;
reg  eq4_expected_prev;
reg  eq5_expected_prev;
reg  eq6_expected_prev;
reg  eq7_expected_prev;
reg  eq8_expected_prev;
reg  eq9_expected_prev;
reg  eq10_expected_prev;
reg  eq11_expected_prev;
reg  eq12_expected_prev;
reg  eq13_expected_prev;
reg  eq14_expected_prev;
reg  eq15_expected_prev;

reg  last_eq0_exp;
reg  last_eq1_exp;
reg  last_eq2_exp;
reg  last_eq3_exp;
reg  last_eq4_exp;
reg  last_eq5_exp;
reg  last_eq6_exp;
reg  last_eq7_exp;
reg  last_eq8_exp;
reg  last_eq9_exp;
reg  last_eq10_exp;
reg  last_eq11_exp;
reg  last_eq12_exp;
reg  last_eq13_exp;
reg  last_eq14_exp;
reg  last_eq15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	eq0_prev = eq0;
	eq1_prev = eq1;
	eq2_prev = eq2;
	eq3_prev = eq3;
	eq4_prev = eq4;
	eq5_prev = eq5;
	eq6_prev = eq6;
	eq7_prev = eq7;
	eq8_prev = eq8;
	eq9_prev = eq9;
	eq10_prev = eq10;
	eq11_prev = eq11;
	eq12_prev = eq12;
	eq13_prev = eq13;
	eq14_prev = eq14;
	eq15_prev = eq15;
end

// update expected /o prevs

always @(trigger)
begin
	eq0_expected_prev = eq0_expected;
	eq1_expected_prev = eq1_expected;
	eq2_expected_prev = eq2_expected;
	eq3_expected_prev = eq3_expected;
	eq4_expected_prev = eq4_expected;
	eq5_expected_prev = eq5_expected;
	eq6_expected_prev = eq6_expected;
	eq7_expected_prev = eq7_expected;
	eq8_expected_prev = eq8_expected;
	eq9_expected_prev = eq9_expected;
	eq10_expected_prev = eq10_expected;
	eq11_expected_prev = eq11_expected;
	eq12_expected_prev = eq12_expected;
	eq13_expected_prev = eq13_expected;
	eq14_expected_prev = eq14_expected;
	eq15_expected_prev = eq15_expected;
end



// expected eq0
initial
begin
	eq0_expected = 1'bX;
end 

// expected eq1
initial
begin
	eq1_expected = 1'bX;
end 

// expected eq2
initial
begin
	eq2_expected = 1'bX;
end 

// expected eq3
initial
begin
	eq3_expected = 1'bX;
end 

// expected eq4
initial
begin
	eq4_expected = 1'bX;
end 

// expected eq5
initial
begin
	eq5_expected = 1'bX;
end 

// expected eq6
initial
begin
	eq6_expected = 1'bX;
end 

// expected eq7
initial
begin
	eq7_expected = 1'bX;
end 

// expected eq8
initial
begin
	eq8_expected = 1'bX;
end 

// expected eq9
initial
begin
	eq9_expected = 1'bX;
end 

// expected eq10
initial
begin
	eq10_expected = 1'bX;
end 

// expected eq11
initial
begin
	eq11_expected = 1'bX;
end 

// expected eq12
initial
begin
	eq12_expected = 1'bX;
end 

// expected eq13
initial
begin
	eq13_expected = 1'bX;
end 

// expected eq14
initial
begin
	eq14_expected = 1'bX;
end 

// expected eq15
initial
begin
	eq15_expected = 1'bX;
end 
// generate trigger
always @(eq0_expected or eq0 or eq1_expected or eq1 or eq2_expected or eq2 or eq3_expected or eq3 or eq4_expected or eq4 or eq5_expected or eq5 or eq6_expected or eq6 or eq7_expected or eq7 or eq8_expected or eq8 or eq9_expected or eq9 or eq10_expected or eq10 or eq11_expected or eq11 or eq12_expected or eq12 or eq13_expected or eq13 or eq14_expected or eq14 or eq15_expected or eq15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected eq0 = %b | expected eq1 = %b | expected eq2 = %b | expected eq3 = %b | expected eq4 = %b | expected eq5 = %b | expected eq6 = %b | expected eq7 = %b | expected eq8 = %b | expected eq9 = %b | expected eq10 = %b | expected eq11 = %b | expected eq12 = %b | expected eq13 = %b | expected eq14 = %b | expected eq15 = %b | ",eq0_expected_prev,eq1_expected_prev,eq2_expected_prev,eq3_expected_prev,eq4_expected_prev,eq5_expected_prev,eq6_expected_prev,eq7_expected_prev,eq8_expected_prev,eq9_expected_prev,eq10_expected_prev,eq11_expected_prev,eq12_expected_prev,eq13_expected_prev,eq14_expected_prev,eq15_expected_prev);
	$display("| real eq0 = %b | real eq1 = %b | real eq2 = %b | real eq3 = %b | real eq4 = %b | real eq5 = %b | real eq6 = %b | real eq7 = %b | real eq8 = %b | real eq9 = %b | real eq10 = %b | real eq11 = %b | real eq12 = %b | real eq13 = %b | real eq14 = %b | real eq15 = %b | ",eq0_prev,eq1_prev,eq2_prev,eq3_prev,eq4_prev,eq5_prev,eq6_prev,eq7_prev,eq8_prev,eq9_prev,eq10_prev,eq11_prev,eq12_prev,eq13_prev,eq14_prev,eq15_prev);
`endif
	if (
		( eq0_expected_prev !== 1'bx ) && ( eq0_prev !== eq0_expected_prev )
		&& ((eq0_expected_prev !== last_eq0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq0_expected_prev);
		$display ("     Real value = %b", eq0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_eq0_exp = eq0_expected_prev;
	end
	if (
		( eq1_expected_prev !== 1'bx ) && ( eq1_prev !== eq1_expected_prev )
		&& ((eq1_expected_prev !== last_eq1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq1_expected_prev);
		$display ("     Real value = %b", eq1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_eq1_exp = eq1_expected_prev;
	end
	if (
		( eq2_expected_prev !== 1'bx ) && ( eq2_prev !== eq2_expected_prev )
		&& ((eq2_expected_prev !== last_eq2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq2_expected_prev);
		$display ("     Real value = %b", eq2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_eq2_exp = eq2_expected_prev;
	end
	if (
		( eq3_expected_prev !== 1'bx ) && ( eq3_prev !== eq3_expected_prev )
		&& ((eq3_expected_prev !== last_eq3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq3_expected_prev);
		$display ("     Real value = %b", eq3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_eq3_exp = eq3_expected_prev;
	end
	if (
		( eq4_expected_prev !== 1'bx ) && ( eq4_prev !== eq4_expected_prev )
		&& ((eq4_expected_prev !== last_eq4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq4_expected_prev);
		$display ("     Real value = %b", eq4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_eq4_exp = eq4_expected_prev;
	end
	if (
		( eq5_expected_prev !== 1'bx ) && ( eq5_prev !== eq5_expected_prev )
		&& ((eq5_expected_prev !== last_eq5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq5_expected_prev);
		$display ("     Real value = %b", eq5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_eq5_exp = eq5_expected_prev;
	end
	if (
		( eq6_expected_prev !== 1'bx ) && ( eq6_prev !== eq6_expected_prev )
		&& ((eq6_expected_prev !== last_eq6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq6_expected_prev);
		$display ("     Real value = %b", eq6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_eq6_exp = eq6_expected_prev;
	end
	if (
		( eq7_expected_prev !== 1'bx ) && ( eq7_prev !== eq7_expected_prev )
		&& ((eq7_expected_prev !== last_eq7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq7_expected_prev);
		$display ("     Real value = %b", eq7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_eq7_exp = eq7_expected_prev;
	end
	if (
		( eq8_expected_prev !== 1'bx ) && ( eq8_prev !== eq8_expected_prev )
		&& ((eq8_expected_prev !== last_eq8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq8_expected_prev);
		$display ("     Real value = %b", eq8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_eq8_exp = eq8_expected_prev;
	end
	if (
		( eq9_expected_prev !== 1'bx ) && ( eq9_prev !== eq9_expected_prev )
		&& ((eq9_expected_prev !== last_eq9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq9_expected_prev);
		$display ("     Real value = %b", eq9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_eq9_exp = eq9_expected_prev;
	end
	if (
		( eq10_expected_prev !== 1'bx ) && ( eq10_prev !== eq10_expected_prev )
		&& ((eq10_expected_prev !== last_eq10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq10_expected_prev);
		$display ("     Real value = %b", eq10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_eq10_exp = eq10_expected_prev;
	end
	if (
		( eq11_expected_prev !== 1'bx ) && ( eq11_prev !== eq11_expected_prev )
		&& ((eq11_expected_prev !== last_eq11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq11_expected_prev);
		$display ("     Real value = %b", eq11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_eq11_exp = eq11_expected_prev;
	end
	if (
		( eq12_expected_prev !== 1'bx ) && ( eq12_prev !== eq12_expected_prev )
		&& ((eq12_expected_prev !== last_eq12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq12_expected_prev);
		$display ("     Real value = %b", eq12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_eq12_exp = eq12_expected_prev;
	end
	if (
		( eq13_expected_prev !== 1'bx ) && ( eq13_prev !== eq13_expected_prev )
		&& ((eq13_expected_prev !== last_eq13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq13_expected_prev);
		$display ("     Real value = %b", eq13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_eq13_exp = eq13_expected_prev;
	end
	if (
		( eq14_expected_prev !== 1'bx ) && ( eq14_prev !== eq14_expected_prev )
		&& ((eq14_expected_prev !== last_eq14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq14_expected_prev);
		$display ("     Real value = %b", eq14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_eq14_exp = eq14_expected_prev;
	end
	if (
		( eq15_expected_prev !== 1'bx ) && ( eq15_prev !== eq15_expected_prev )
		&& ((eq15_expected_prev !== last_eq15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq15_expected_prev);
		$display ("     Real value = %b", eq15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_eq15_exp = eq15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg enable;
reg Res;
// wires                                               
wire eq0;
wire eq1;
wire eq2;
wire eq3;
wire eq4;
wire eq5;
wire eq6;
wire eq7;
wire eq8;
wire eq9;
wire eq10;
wire eq11;
wire eq12;
wire eq13;
wire eq14;
wire eq15;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.enable(enable),
	.eq0(eq0),
	.eq1(eq1),
	.eq2(eq2),
	.eq3(eq3),
	.eq4(eq4),
	.eq5(eq5),
	.eq6(eq6),
	.eq7(eq7),
	.eq8(eq8),
	.eq9(eq9),
	.eq10(eq10),
	.eq11(eq11),
	.eq12(eq12),
	.eq13(eq13),
	.eq14(eq14),
	.eq15(eq15),
	.Res(Res)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #12500 1'b1;
	#12500;
end 

// Res
always
begin
	Res = 1'b0;
	Res = #2000 1'b1;
	#2000;
end 

// enable
initial
begin
	enable = 1'b1;
end 

main_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.enable(enable),
	.Res(Res),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.eq0(eq0),
	.eq1(eq1),
	.eq2(eq2),
	.eq3(eq3),
	.eq4(eq4),
	.eq5(eq5),
	.eq6(eq6),
	.eq7(eq7),
	.eq8(eq8),
	.eq9(eq9),
	.eq10(eq10),
	.eq11(eq11),
	.eq12(eq12),
	.eq13(eq13),
	.eq14(eq14),
	.eq15(eq15),
	.sampler_rx(sampler)
);
endmodule

